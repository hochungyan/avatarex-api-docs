{
  "openapi": "3.0.1",
  "info": {
    "title": "AvatarEx API",
    "description": "Enterprise-grade REST API for AvatarEx Foreign Exchange Trading Platform. Provides comprehensive endpoints for managing forex trading operations, including account management, fund transfers, forward contracts, and market monitoring.",
    "contact": {
      "name": "AvatarEx Team",
      "email": "support@avatarex.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.0"
  },
  "servers": [],
  "tags": [
    {
      "name": "Health Check",
      "description": "System health monitoring endpoints"
    },
    {
      "name": "User API",
      "description": "User account management and profile operations"
    },
    {
      "name": "Bank Account",
      "description": "Bank account integration and management operations"
    },
    {
      "name": "WatchList API",
      "description": "Currency pair monitoring and market tracking functionality"
    },
    {
      "name": "Fund Transfer",
      "description": "Secure fund transfer operations between bank and brokerage accounts"
    },
    {
      "name": "Forward Request",
      "description": "Forward contract request creation and management"
    },
    {
      "name": "Forward Match",
      "description": "Forward contract matching and execution operations"
    },
    {
      "name": "Brokerage Account",
      "description": "Trading account management and balance operations"
    },
    {
      "name": "auth API",
      "description": "Authentication and authorization operations"
    }
  ],
  "paths": {
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "User API"
        ],
        "summary": "Get current user",
        "description": "Get the current user based on the authentication token",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "email": "john.doe@example.com",
                      "displayName": "John Doe",
                      "displayCurrency": "USD"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                },
                "examples": {
                  "serverError": {
                    "value": {
                      "error": "Internal server error occurred",
                      "message": "Unable to process request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                },
                "examples": {
                  "unauthorized": {
                    "value": {
                      "error": "Authentication token is missing or invalid"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "User API"
        ],
        "summary": "Update user details",
        "description": "Update email, displayName, or displayed currency of the current user. The User CANNOT update the password currently.",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/bank-accounts/me/{bankAccountId}": {
      "get": {
        "tags": [
          "Bank Account"
        ],
        "summary": "Retrieve bank account by ID",
        "operationId": "getBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "If the user owns a bank account with this id, it will be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Bank account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                },
                "examples": {
                  "notFound": {
                    "value": {
                      "error": "Bank account not found",
                      "message": "No bank account exists with the provided ID"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Bank account retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174001",
                      "userId": "123e4567-e89b-12d3-a456-426614174000",
                      "accountNumber": "1234567890",
                      "bankName": "Example Bank",
                      "currencyCode": "USD"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Bank Account"
        ],
        "summary": "Update bank account",
        "operationId": "updateBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountUpdateDto"
              },
              "examples": {
                "update": {
                  "value": {
                    "accountNumber": "1234567890",
                    "bankName": "Updated Bank Name",
                    "currencyCode": "USD"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bank account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Bank account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Bank Account"
        ],
        "summary": "Delete bank account",
        "operationId": "deleteBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bank account deleted successfully"
          },
          "404": {
            "description": "Bank account not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/watchlists/me": {
      "get": {
        "tags": [
          "WatchList API"
        ],
        "summary": "Get all watchlists for the current user",
        "operationId": "getWatchLists",
        "responses": {
          "200": {
            "description": "Watchlists retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WatchListResponseDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WatchListResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WatchListResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "WatchList API"
        ],
        "summary": "Create a new watchlist for the current user",
        "operationId": "createWatchList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WatchListRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Watchlist created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/fund-transfers": {
      "post": {
        "tags": [
          "Fund Transfer"
        ],
        "summary": "Create a new fund transfer",
        "operationId": "createFundTransfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FundTransferRequestDto"
              },
              "examples": {
                "transfer": {
                  "value": {
                    "isWithdrawal": false,
                    "bankAccountId": "123e4567-e89b-12d3-a456-426614174001",
                    "brokerageAccountId": "123e4567-e89b-12d3-a456-426614174003",
                    "transferAmount": 1000.00
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Fund transfer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundTransferResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "transferId": "123e4567-e89b-12d3-a456-426614174004",
                      "isWithdrawal": false,
                      "transferAmount": 1000.00,
                      "bankAccountId": "123e4567-e89b-12d3-a456-426614174001",
                      "brokerageAccountId": "123e4567-e89b-12d3-a456-426614174003"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundTransferResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundTransferResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/forward-requests/me": {
      "get": {
        "tags": [
          "Forward Request"
        ],
        "summary": "Get all forward requests for the current user",
        "operationId": "getForwardRequests",
        "responses": {
          "200": {
            "description": "Successfully retrieved forward requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForwardRequestResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForwardRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Forward Request"
        ],
        "summary": "Create a forward request for the current user",
        "operationId": "createForwardRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardRequestRequestDto"
              },
              "examples": {
                "request": {
                  "value": {
                    "isBuy": true,
                    "fromCurrencyCode": "USD",
                    "toCurrencyCode": "EUR",
                    "executionRate": 1.05,
                    "fromQuantity": 10000.00,
                    "executionDate": "2024-03-15",
                    "expirationDate": "2024-03-14"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created forward request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardRequestResponseDto"
                },
                "examples": {
                  "invalidRequest": {
                    "value": {
                      "error": "Invalid request parameters",
                      "details": {
                        "executionDate": "Execution date must be in the future",
                        "fromQuantity": "Amount must be greater than 0"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardRequestResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/forward-matches/me": {
      "get": {
        "tags": [
          "Forward Match"
        ],
        "summary": "Get all forward matches for the current user as a matcher",
        "operationId": "getForwardMatchesAsMatcher",
        "responses": {
          "200": {
            "description": "Successfully retrieved forward matches",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForwardMatchResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForwardMatchResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Forward Match"
        ],
        "summary": "Create a forward match for the current user for an open forward request",
        "operationId": "createForwardMatch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwardMatchRequestDto"
              },
              "examples": {
                "match": {
                  "value": {
                    "forwardRequestId": "123e4567-e89b-12d3-a456-426614174005"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created forward match",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardMatchResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174006",
                      "matchedAt": "2024-03-10T15:30:00Z",
                      "matcherId": "123e4567-e89b-12d3-a456-426614174000",
                      "forwardRequest": {
                        "id": "123e4567-e89b-12d3-a456-426614174005",
                        "userId": "123e4567-e89b-12d3-a456-426614174007",
                        "isBuy": true,
                        "fromCurrencyCode": "USD",
                        "toCurrencyCode": "EUR",
                        "executionRate": 1.05,
                        "fromQuantity": 10000.00,
                        "executionDate": "2024-03-15T00:00:00Z",
                        "expirationDate": "2024-03-14T00:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardMatchResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardMatchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/brokerage-accounts/me": {
      "get": {
        "tags": [
          "Brokerage Account"
        ],
        "summary": "Get all brokerage accounts",
        "operationId": "getBrokerageAccounts",
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved brokerage accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Brokerage Account"
        ],
        "summary": "Create brokerage account",
        "operationId": "createBrokerageAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerageAccountCreateRequestDto"
              },
              "examples": {
                "create": {
                  "value": {
                    "currencyCode": "USD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully created brokerage account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174003",
                      "userId": "123e4567-e89b-12d3-a456-426614174000",
                      "currencyCode": "USD",
                      "balance": 0.00
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/bank-accounts/me": {
      "get": {
        "tags": [
          "Bank Account"
        ],
        "summary": "Retrieve all bank accounts",
        "operationId": "getBankAccounts",
        "responses": {
          "200": {
            "description": "All bank accounts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountResponseDto"
                  }
                },
                "examples": {
                  "success": {
                    "value": [{
                      "id": "123e4567-e89b-12d3-a456-426614174001",
                      "userId": "123e4567-e89b-12d3-a456-426614174000",
                      "accountNumber": "1234567890",
                      "bankName": "Example Bank",
                      "currencyCode": "USD"
                    }]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "post": {
        "tags": [
          "Bank Account"
        ],
        "summary": "Link bank account",
        "operationId": "linkBankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountLinkRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bank account linked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": [
          "auth API"
        ],
        "summary": "Create a new user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterDto"
              },
              "examples": {
                "register": {
                  "value": {
                    "email": "john.doe@example.com",
                    "displayName": "John Doe",
                    "password": "Password123",
                    "displayCurrency": "USD"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "auth API"
        ],
        "summary": "Login",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                }
              },
              "examples": {
                "login": {
                  "value": {
                    "email": "john.doe@example.com",
                    "password": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "examples": {
                  "invalidCredentials": {
                    "value": {
                      "error": "Invalid email or password"
                    }
                  },
                  "validationError": {
                    "value": {
                      "email": "Email is required",
                      "password": "Password must be at least 8 characters"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/watchlists/me/{watchListId}": {
      "get": {
        "tags": [
          "WatchList API"
        ],
        "summary": "Get a watchlist by ID for the current user",
        "operationId": "getWatchList",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Watchlist not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Watchlist retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174002",
                      "userId": "123e4567-e89b-12d3-a456-426614174000",
                      "fromCurrencyCode": "USD",
                      "toCurrencyCode": "EUR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "WatchList API"
        ],
        "summary": "Delete a watchlist by ID for the current user",
        "operationId": "deleteWatchList",
        "parameters": [
          {
            "name": "watchListId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Watchlist deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Health Check"
        ],
        "summary": "Check service health",
        "description": "Returns OK if the service is running",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "value": {
                      "status": "UP",
                      "timestamp": "2024-03-10T12:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "error": {
                    "value": {
                      "status": "DOWN",
                      "error": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/fund-transfers/me": {
      "get": {
        "tags": [
          "Fund Transfer"
        ],
        "summary": "Get all fund transfers for the current user",
        "operationId": "getFundTransfers",
        "responses": {
          "200": {
            "description": "Fund transfers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundTransferResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FundTransferResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/fund-transfers/me/{fundTransferId}": {
      "get": {
        "tags": [
          "Fund Transfer"
        ],
        "summary": "Get a fund transfer by ID",
        "operationId": "getFundTransfer",
        "parameters": [
          {
            "name": "fundTransferId",
            "in": "path",
            "description": "The ID of the fund transfer to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundTransferResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Fund transfer retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundTransferResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "transferId": "123e4567-e89b-12d3-a456-426614174004",
                      "isWithdrawal": false,
                      "transferAmount": 1000.00,
                      "bankAccountId": "123e4567-e89b-12d3-a456-426614174001",
                      "brokerageAccountId": "123e4567-e89b-12d3-a456-426614174003"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundTransferResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/forward-requests/me/{id}": {
      "get": {
        "tags": [
          "Forward Request"
        ],
        "summary": "Get a forward request by ID for the current user",
        "operationId": "getForwardRequestById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved forward request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardRequestResponseDto"
                },
                "examples": {
                  "success": {
                    "value": {
                      "id": "123e4567-e89b-12d3-a456-426614174005",
                      "userId": "123e4567-e89b-12d3-a456-426614174000",
                      "isBuy": true,
                      "fromCurrencyCode": "USD",
                      "toCurrencyCode": "EUR",
                      "executionRate": 1.05,
                      "fromQuantity": 10000.00,
                      "executionDate": "2024-03-15T00:00:00Z",
                      "expirationDate": "2024-03-14T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Forward request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardRequestResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardRequestResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Forward Request"
        ],
        "summary": "Delete a forward request by ID for the current user",
        "operationId": "deleteForwardRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted forward request"
          },
          "404": {
            "description": "Forward request not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/forward-matches/me/{id}": {
      "get": {
        "tags": [
          "Forward Match"
        ],
        "summary": "Get a forward match by ID for the current user as a matcher",
        "operationId": "getForwardMatchById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Forward match not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardMatchResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved forward match",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardMatchResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForwardMatchResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    },
    "/api/v1/brokerage-accounts/me/{brokerageAccountId}": {
      "get": {
        "tags": [
          "Brokerage Account"
        ],
        "summary": "Get brokerage account by ID",
        "operationId": "getBrokerageAccount",
        "parameters": [
          {
            "name": "brokerageAccountId",
            "in": "path",
            "description": "The ID of the brokerage account to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Brokerage account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved brokerage account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerageAccountResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Brokerage Account"
        ],
        "summary": "Delete brokerage account",
        "operationId": "deleteBrokerageAccount",
        "parameters": [
          {
            "name": "brokerageAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Successfully deleted brokerage account"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer Authentication": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Bearer Authentication": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your bearer token in the format **Bearer <token>**"
      }
    },
    "schemas": {
      "UserUpdateDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "displayName": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 50,
            "minLength": 3
          },
          "displayCurrency": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayCurrency": {
            "type": "string"
          }
        }
      },
      "BankAccountUpdateDto": {
        "required": [
          "accountNumber",
          "bankName",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "maxLength": 20,
            "minLength": 10,
            "example": "1234567890"
          },
          "bankName": {
            "type": "string",
            "maxLength": 100,
            "minLength": 2,
            "example": "Example Bank"
          },
          "currencyCode": {
            "type": "string",
            "maxLength": 3,
            "minLength": 3,
            "example": "USD"
          }
        }
      },
      "BankAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "accountNumber": {
            "type": "string"
          },
          "bankName": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          }
        }
      },
      "WatchListRequestDto": {
        "required": [
          "fromCurrencyCode",
          "toCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "fromCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "toCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          }
        }
      },
      "WatchListResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "fromCurrencyCode": {
            "type": "string"
          },
          "toCurrencyCode": {
            "type": "string"
          }
        }
      },
      "FundTransferRequestDto": {
        "required": [
          "bankAccountId",
          "brokerageAccountId",
          "isWithdrawal",
          "transferAmount"
        ],
        "type": "object",
        "properties": {
          "isWithdrawal": {
            "type": "boolean",
            "description": "Whether this is a withdrawal from brokerage to bank account (true) or deposit from bank to brokerage account (false)",
            "example": true
          },
          "bankAccountId": {
            "type": "string",
            "description": "The ID of the bank account to transfer funds from/to",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "brokerageAccountId": {
            "type": "string",
            "description": "The ID of the brokerage account to transfer funds from/to",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "transferAmount": {
            "minimum": 0.01,
            "type": "number",
            "description": "The amount to transfer. Must be positive and in the currency of both accounts",
            "format": "double",
            "example": 1000
          }
        },
        "description": "Request object for creating a fund transfer between bank and brokerage accounts"
      },
      "FundTransferResponseDto": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "format": "uuid"
          },
          "isWithdrawal": {
            "type": "boolean"
          },
          "transferAmount": {
            "type": "number",
            "format": "double"
          },
          "bankAccountId": {
            "type": "string"
          },
          "brokerageAccountId": {
            "type": "string"
          }
        }
      },
      "ForwardRequestRequestDto": {
        "required": [
          "executionDate",
          "executionRate",
          "expirationDate",
          "fromCurrencyCode",
          "fromQuantity",
          "isBuy",
          "toCurrencyCode"
        ],
        "type": "object",
        "properties": {
          "isBuy": {
            "type": "boolean"
          },
          "fromCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "toCurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "executionRate": {
            "type": "number",
            "format": "double"
          },
          "fromQuantity": {
            "type": "number",
            "format": "double"
          },
          "executionDate": {
            "type": "string",
            "format": "date"
          },
          "expirationDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ForwardMatchResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "matchedAt": {
            "type": "string",
            "format": "date-time"
          },
          "matcherId": {
            "type": "string",
            "format": "uuid"
          },
          "forwardRequest": {
            "$ref": "#/components/schemas/ForwardRequestResponseDto"
          }
        }
      },
      "ForwardRequestResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "isBuy": {
            "type": "boolean"
          },
          "fromCurrencyCode": {
            "type": "string"
          },
          "toCurrencyCode": {
            "type": "string"
          },
          "executionRate": {
            "type": "number",
            "format": "double"
          },
          "fromQuantity": {
            "type": "number",
            "format": "double"
          },
          "executionDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "forwardMatch": {
            "$ref": "#/components/schemas/ForwardMatchResponseDto"
          }
        }
      },
      "ForwardMatchRequestDto": {
        "required": [
          "forwardRequestId"
        ],
        "type": "object",
        "properties": {
          "forwardRequestId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BrokerageAccountCreateRequestDto": {
        "required": [
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          }
        }
      },
      "BrokerageAccountResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyCode": {
            "type": "string"
          },
          "balance": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "BankAccountLinkRequestDto": {
        "required": [
          "accountNumber",
          "bankName",
          "currencyCode"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "maxLength": 20,
            "minLength": 10,
            "type": "string"
          },
          "bankName": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "currencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          }
        }
      },
      "UserRegisterDto": {
        "required": [
          "displayName",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "displayName": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "password": {
            "maxLength": 100,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).*$",
            "type": "string"
          },
          "displayCurrency": {
            "type": "string"
          }
        }
      }
    }
  }
} 